"""
Django settings for apiTestPlatform project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5gg#!ndx#=+=gv313xlu1-qjg8hhkndp4b=!=-@s0&9zq*w@j='

# SECURITY WARNING: don't run with debug turned on in production!
# 开发环境开启debug模式
# DEBUG = True
#
# ALLOWED_HOSTS = []
# 生产环境，关闭debug
# DEBUG = False
# 设置所有用户都允许访问
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 自定义应用注册
    "rest_framework",
    "users",
    "Testproject",
    "TestInterface.apps.TestinterfaceConfig",
    "Scenes.apps.ScenesConfig",
    "TestTask.apps.TesttaskConfig",
    "Cronjob.apps.CronjobConfig",
    "BugManage.apps.BugmanageConfig",
    # 注册安装的djangorestframework-simplejwt应用
    'rest_framework_simplejwt',
    # 注册Django的过滤器插件
    'django_filters',
    'django_celery_beat',
    # 实现对前端CORS跨域请求的支持
    'corsheaders',
    # WebSocket支持
    'channels',
    # 性能测试应用
    "Performance.apps.PerformanceConfig",
]

# 性能测试本地相关配置
PERFORMANCE_TEST = {
    'LOCUST_MASTER_HOST': 'localhost',

    'LOCUST_MASTER_PORT': 5557,
    'REPORT_DIR': BASE_DIR / 'performance_reports',
    'MAX_WORKERS': 4,
    'DEFAULT_RUNTIME': 3600,  # 默认运行时间（秒）
    'DEFAULT_SPAWN_RATE': 10,  # 默认用户生成速率
    'DEFAULT_WAIT_TIME': {"min": 1, "max": 5}  # 默认思考时间范围（秒）

}
# # 性能测试云服务器相关配置
# PERFORMANCE_TEST = {
#     'LOCUST_MASTER_HOST': '0.0.0.0',  # 允许远程访问
#     'LOCUST_MASTER_PORT': 5557,
#     'REPORT_DIR': BASE_DIR / 'performance_reports',  # 性能测试报告存储路径
#     'MAX_WORKERS': 8,  # 根据服务器CPU核心数调整
#     'DEFAULT_RUNTIME': 3600,  # 默认运行时间（秒）
#     'DEFAULT_SPAWN_RATE': 10,  # 默认用户生成速率
#     'DEFAULT_WAIT_TIME': {"min": 1, "max": 5}  # 默认思考时间范围（秒）
# }


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 加上corsheaders的中间件，实现对跨域请求的支持
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'apiTestPlatform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apiTestPlatform.wsgi.application'
ASGI_APPLICATION = 'apiTestPlatform.asgi.application'

# Channels配置
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# 本地环境数据库配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'apitest4',
        'USER': 'root',
        'PASSWORD': 'root123456',
        'PORT': 3306,
        'HOST': 'localhost',
        # 数据库连接池配置
        'CONN_MAX_AGE': 60,  # 连接的最大生命周期（秒）
        'OPTIONS': {
            'charset': 'utf8mb4',
            'connect_timeout': 10,
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
        }
    }
}
# # 生产环境数据库配置
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'test001',
#         'USER': 'torin',
#         'PASSWORD': 'torin666',
#         'PORT': 3306,
#         'HOST': '127.0.0.1'
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
# 将项目下的所有静态文件收集到 STATIC_ROOT 目录下
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# DRF配置JWT鉴权方式
REST_FRAMEWORK = {
    # 配置登录鉴权方式
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 配置DRF使用的过滤器(通过django_filter插件来进行过滤)
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
}
# 配置token的有效期


SIMPLE_JWT = {"ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),  # 访问令牌的有效时间
              "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # 刷新令牌的有效时间

              "ROTATE_REFRESH_TOKENS": False,  # 若为True，则刷新后新的refresh_token有更新的有效时间
              "BLACKLIST_AFTER_ROTATION": True,  # 若为True，刷新后的token将添加到黑名单中,

              "ALGORITHM": "HS256",  # 对称算法：HS256 HS384 HS512  非对称算法：RSA
              "SIGNING_KEY": SECRET_KEY,
              "VERIFYING_KEY": None,  # if signing_key, verifying_key will be ignore.
              "AUDIENCE": None,
              "ISSUER": None,

              "AUTH_HEADER_TYPES": ("Bearer",),  # Authorization: Bearer <token>
              "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # if HTTP_X_ACCESS_TOKEN, X_ACCESS_TOKEN: Bearer <token>
              "USER_ID_FIELD": "id",  # 使用唯一不变的数据库字段,将包含在生成的令牌中以标识用户
              "USER_ID_CLAIM": "user_id",
              }
MEDIA_ROOT = BASE_DIR / 'files'
# =========celery的配置============
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60

# Redis配置
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0

# Celery配置
CELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/3'
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}/3'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Celery性能优化配置
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # 限制worker预取任务数
CELERY_WORKER_MAX_TASKS_PER_CHILD = 200  # worker处理多少个任务后自动重启
CELERY_WORKER_CONCURRENCY = 4  # worker并发数

# Celery Beat配置
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_MAX_LOOP_INTERVAL = 60  # beat最大循环间隔（秒）

# =========前端ajax跨域请求的配置==============
# 允许所有用户跨域访问
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_CREDENTIALS 指明在跨域访问中，后端是否支持对cookie的操作。

CORS_ALLOW_CREDENTIALS = True